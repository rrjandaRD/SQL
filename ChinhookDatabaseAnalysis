-- Chinhook Database Management & Analysis--

--Explore Data from tables--
SELECT * FROM customers
ORDER BY LastName 
LIMIT 5;

SELECT * FROM albums
LIMIT 5;

SELECT * FROM artists
ORDER BY Name
LIMIT 5;

SELECT * FROM employees
ORDER BY LastName 
LIMIT 5;

SELECT * FROM genres
ORDER BY Name
LIMIT 5;

SELECT * FROM invoice_items
LIMIT 5;

SELECT * FROM invoices
LIMIT 5;

SELECT * FROM media_types
LIMIT 5;

SELECT * FROM playlist_track
LIMIT 5;

SELECT * FROM playlists
LIMIT 5;

SELECT * FROM tracks
ORDER BY Name
LIMIT 5;


--Showing Customers (their full names, customer ID, and country) who are not in the US. --
SELECT FirstName, LastName, CustomerID, Country 
FROM customers
WHERE Country <> "USA"
ORDER BY Country;

--Showing only the Customers from Brazil.--
SELECT FirstName, LastName, CustomerID, Country 
FROM customers
WHERE CountrY=  "Brazil";

--Invoices of customers who are from Brazil, 
--with customer's full name, Invoice ID, Date of the invoice, and billing country.--
SELECT c.FirstName, c.LastName, i.invoiceid, i.InvoiceDate, i.BillingCountry
FROM invoices i
JOIN customers c
ON i.CustomerId= c.CustomerId
WHERE country LIKE "%brazil%";

--Showing Employees who are Sales Agents--
SELECT FirstName, LastName, Title, EmployeeId
FROM employees
WHERE Title LIKE "%sales%agent%";

--List of distinct billing countries--
SELECT DISTINCT BillingCountry FROM invoices
ORDER BY BillingCountry;

--Shows the invoices associated with each sales agent. --
SELECT e.LastName, e.Firstname, i.InvoiceId
FROM chinook.Employees e
JOIN chinook.Customers c ON c.SupportRepId = e.EmployeeId
JOIN chinook.Invoices i ON i.CustomerId = c.CustomerId;

--Shows the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers--
SELECT c.LastName, c.Firstname, c.Country, e.LastName, e.Firstname, i.total
FROM chinook.Employees e
JOIN chinook.Customers c 
ON c.SupportRepId = e.EmployeeId
JOIN chinook.Invoices i 
ON i.CustomerId = c.CustomerId;

--Number of Invoices in 2009--
SELECT COUNT (*) 
FROM invoices
WHERE InvoiceDate BETWEEN "2009-01-01" AND "2009-12-31"; 

--Total sales in 2009--
SELECT SUM (total) 
FROM invoices
WHERE InvoiceDate BETWEEN "2009-01-01" AND "2009-12-31";

--How many Invoices were there in 2009 and 2011? What are the respective total sales for each of those years?
select count(i.invoiceid), ROUND(sum(i.total))
from invoices as i
where i.invoicedate between datetime('2009-01-01 00:00:00') and datetime('2009-12-31 00:00:00');

-- Purchased track name with each invoice line ID--
SELECT t.Name, ii.InvoiceLineId
FROM tracks t
JOIN invoice_items ii 
ON t.trackId = ii.TrackId
ORDER BY InvoiceLineId;

--Purchased track name AND artist name with each invoice line ID--
SELECT t.Name as Track, ar.name as Artist, i.InvoiceLineId
FROM Invoice_items i
LEFT JOIN tracks t 
ON i.TrackID=t.TrackID
INNER JOIN albums a
ON a.AlbumID=t.AlbumID
LEFT JOIN artists ar
ON ar.ArtistID=a.ArtistID;

--All Tracks, and include the Album name, Media type, and Genre--
SELECT t.Name as Track, a.Title as Album, m.Name as MediaType, g.Name as Genre
FROM tracks t
INNER JOIN albums a 
ON t.AlbumID=a.albumID
INNER JOIN media_types m
ON m.mediatypeID=t.mediatypeID
INNER JOIN genres g
ON t.genreID=g.genreID;

--Total sales made by each sales agent--
SELECT e.FirstName, e.LastName,
ROUND(SUM(I.Total),2) as 'Total Sales' 
FROM Employees e
JOIN Customers c
ON c.SupportRepId = e.EmployeeId
JOIN Invoices I 
ON I.CustomerId = c.CustomerId
WHERE e.Title = 'Sales Support Agent' 
GROUP BY e.FirstName;

--Sales agent who made the most in sales over all
SELECT e.FirstName, e.LastName,
ROUND(SUM(I.Total),2) as 'Total Sales' 
FROM Employees e
JOIN Customers c
ON c.SupportRepId = e.EmployeeId
JOIN Invoices I 
ON I.CustomerId = c.CustomerId
WHERE e.Title = 'Sales Support Agent' 
GROUP BY e.FirstName
ORDER BY "Total Sales" DESC
LIMIT 1;
       --OR--
SELECT e.lastname, e.firstname, max(total) FROM
(SELECT e.*, sum(total) AS 'Total'
FROM  employees e
JOIN customers c 
ON e.employeeid = c.supportrepid
JOIN invoices i 
ON i.customerid = c.customerid
GROUP BY e.employeeid);     


--Albums recorded by the artist Queen
SELECT a.name as Artist, al.Title as Album
FROM artists a
JOIN albums al
ON a.artistid=al.artistid
WHERE name like "%Queen%";

--Explore Media Types.
SELECT DISTINCT Name 
FROM media_types;

--Number of tracks that belong to the media type "Protected MPEG-4 video file"
SELECT COUNT(t.trackId)
FROM tracks t
JOIN media_types m
ON t.mediatypeid = m.mediatypeid
WHERE m.name LIKE "%protected m%";

--Track & artists under the genre "Hip Hop/Rap"
SELECT a.Name, t.Name, g.Name
FROM tracks t
JOIN genres g 
ON t.genreid = g.genreid
JOIN albums al
ON t.albumid=al.albumid
JOIN artists a
ON a.artistid=al.artistid
WHERE g.name LIKE "%hip%"
ORDER BY a.Name;

--Count how many tracks belong to the "Hip Hop/Rap" genre
SELECT g.name as Genre, COUNT(t.Name) as "Number of Tracks"
FROM tracks t
JOIN genres g 
ON t.genreid = g.genreid
WHERE g.name LIKE "%hip%";

--total amount of time required to listen to all the tracks in the database
SELECT ROUND(((SUM(Milliseconds) *.001)/60)/60) as "Hours required to listen to all tracks"
FROM tracks;

SELECT ROUND((SUM(Milliseconds) *.001)/60) as "Minutes required to listen to all tracks"
FROM tracks;

--The most expensive track that has the media type "MPEG audio file":
--There is no most expensive track as all MPEG audio files are all the same price 0.99--
SELECT t.name, t.unitprice, m.name
FROM chinook.tracks t
JOIN chinook.media_types m
ON t.mediatypeid = m.mediatypeid
WHERE m.name LIKE "%audio%";
ORDER BY unitprice DESC;

--First two artists in the database (possibly oldest artists)--
SELECT Name, artistid FROM artists
ORDER BY artistID LIMIT 2;

--least expensive track that has the genre "Electronica/Dance"--
--There is no least expensive track as all are the same price 0.99--
SELECT t.name, t.unitprice, g.name
FROM tracks t
JOIN genres g
ON t.genreid = g.genreid
WHERE g.name LIKE "%electron%"
ORDER BY unitprice;

--Lists "MPEG autio file" tracks in the genre "Electronica/Dance"--
SELECT t.Name as Track, m.Name as MediaType, g.Name as Genre
FROM tracks t
INNER JOIN media_types m
ON m.mediatypeID=t.mediatypeID
INNER JOIN genres g
ON t.genreID=g.genreID
WHERE g.name = "Electronica/Dance"
AND m.name LIKE "%mpeg%audio%"
ORDER BY t.name;

--Shows the # of customers assigned to each sales agent.
SELECT e.FirstName, e.LastName,
COUNT (distinct C.customerid) as 'Total Customers' 
FROM Employees e
JOIN Customers c
ON c.SupportRepId = e.EmployeeId
JOIN Invoices I 
ON I.CustomerId = c.CustomerId
GROUP BY e.employeeid;
        --OR--
SELECT e.FirstName, e.LastName, COUNT(c.customerid) as 'TotalCustomers'
FROM employees  e
JOIN customers as c 
ON e.employeeid = c.supportrepid
GROUP BY e.employeeid;

--Total sales per country (shows which country's customers spent the most)
SELECT i.billingcountry, ROUND(sum(total),2) as 'TotalSales'
FROM invoices  i
GROUP BY billingcountry
ORDER BY totalsales DESC;
     --OR
SELECT c.country,
ROUND(SUM(I.Total),2) as 'Total Sales' 
FROM customers c
JOIN Invoices I 
ON I.CustomerId = c.CustomerId
GROUP BY c.country
ORDER BY "Total Sales" DESC;

--Most purchased track of 2013
SELECT ii.TrackID, COUNT(ii.trackID) AS "Tracks Purchased" 
FROM invoice_items ii
JOIN invoices i
ON i.invoiceid = ii.invoiceid
GROUP BY trackID
HAVING invoicedate BETWEEN "2013-01-01 00:00:00" AND "2013-12-31 00:00:00"
ORDER BY "Tracks Purchased" DESC;
