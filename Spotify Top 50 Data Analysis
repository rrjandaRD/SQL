-- For this project, I downloaded Spotify data from Kaggle.
-- Then, I created a table to insert Spotify data into.
-- Finally, I performed analytics on the data using SQL. 

--Creates table
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

--Explores available data
SELECT * 
FROM BIT_DB.Spotifydata
LIMIT 5;

-- displays all songs with a high danceability score, then lists them in order of popularity score\
SELECT popularity, artist_name, track_name, danceability
FROM BIT_DB.Spotifydata
WHERE danceability > 0.8
ORDER BY popularity;

-- displays all songs with a high danceability score AND a high popularity score, then lists them in order of popularity score\
SELECT popularity, artist_name, track_name, danceability
FROM BIT_DB.Spotifydata
WHERE danceability > 0.8
AND popularity >85
ORDER BY popularity;

-- displays the number of songs that have a high danceabiltiy score of >0.8\ 
SELECT count(id)
FROM BIT_DB.Spotifydata
HAVING danceability >.8;

-- displays all songs with a high tempo and medium danceability score, then lists them from high tempo to low tempo\
SELECT artist_name, track_name
FROM BIT_DB.Spotifydata
WHERE tempo >120
AND danceability >.5
ORDER BY tempo desc;

-- displays the average danceability score of all songs\
SELECT avg(danceability)
FROM BIT_DB.Spotifydata;

-- displays top 10 artists based on their song titles and lists them in order of popularity score\
SELECT artist_name, track_name
FROM BIT_DB.Spotifydata
ORDER BY popularity
LIMIT 10;

-- displays the artist name with the longest song\
SELECT artist_name, max(duration_ms) 
FROM  BIT_DB.Spotifydata 
group by artist_name
ORDER BY duration_ms desc
LIMIT 1;

-- displays the average danceability for the 10 most popular songs\
SELECT AVG (danceability)
FROM BIT_DB.Spotifydata
where popularity in (SELECT popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity asc
LIMIT 10);

-- groups all artist names and counts the number of titles each has, and lists first the artists with the most songs\
SELECT artist_name, count (*) 
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY Count (*) desc;

-- displays the names of artists who have more than 1 song on the list\
SELECT artist_name, count (*) 
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING count (*) >1
ORDER BY Count (*) desc;

-- counts the number of songs that fall under the assigned descriptions creaated based on popularity score\
SELECT COUNT(*),
    CASE 
        WHEN popularity >=90 THEN "1.Extremely_Popular" 
        WHEN popularity >=80 THEN "2.Popular"
        WHEN popularity >=70 THEN "3.Average_Popular"
        WHEN popularity >=60 THEN "4.Less_Popular"
    END as "HowPopular"
FROM BIT_DB.Spotifydata
GROUP BY "HowPopular"
ORDER BY "HowPopular";


